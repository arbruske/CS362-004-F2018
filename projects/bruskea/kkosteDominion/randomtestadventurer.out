
Random Test: Adventurer Card
Hand:
Expected Hand: 7, Actual Hand: 5
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 10, Actual Hand: 11
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 5
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 10, Actual Hand: 11
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 10, Actual Hand: 11
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 13, Actual Hand: 13
Test Successful!
Hand:
Expected Hand: 15, Actual Hand: 16
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 5
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 10, Actual Hand: 11
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 13, Actual Hand: 14
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 5
Warning: Test failed. Hand count is not correct.
Hand:
Expected Hand: 7, Actual Hand: 8
Warning: Test failed. Hand count is not correct.

Adventurer Card Random Test Complete.
Function 'playFeast'
Lines executed:0.00% of 17
No branches
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

Function 'playCouncilRoom'
Lines executed:0.00% of 10
No branches
No calls

Function 'playAdventurer'
Lines executed:100.00% of 18
No branches
No calls

Function 'playSmithy'
Lines executed:100.00% of 6
No branches
No calls

Function 'updateCoins'
Lines executed:81.82% of 11
No branches
No calls

Function 'gainCard'
Lines executed:61.54% of 13
No branches
No calls

Function 'discardCard'
Lines executed:84.62% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:7.54% of 199
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:0.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
No branches
No calls

File 'dominion.c'
Lines executed:30.86% of 567
Branches executed:29.50% of 417
Taken at least once:21.10% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1846 returned 100% blocks executed 83%
     1846:    8:int compare(const void* a, const void* b) {
     1846:    8-block  0
     1846:    9:  if (*(int*)a > *(int*)b)
     1846:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1846
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
     1846:   11:  if (*(int*)a < *(int*)b)
     1846:   11-block  0
branch  0 taken 492 (fallthrough)
branch  1 taken 1354
      492:   12:    return -1;
      492:   12-block  0
unconditional  0 taken 492
     1354:   13:  return 0;
     1354:   13-block  0
unconditional  0 taken 1354
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 60 returned 100% blocks executed 97%
       60:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
       60:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       60:   44:  SelectStream(1);
       60:   44-block  0
call    0 returned 60
       60:   45:  PutSeed((long)randomSeed);
call    0 returned 60
        -:   46:  
        -:   47:  //check number of players
       60:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 53 (fallthrough)
branch  1 taken 7
       53:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 53
        -:   49:    {
        7:   50:      return -1;
        7:   50-block  0
unconditional  0 taken 7
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       53:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      583:   57:  for (i = 0; i < 10; i++)
       53:   57-block  0
unconditional  0 taken 53
      530:   57-block  1
unconditional  1 taken 530
      583:   57-block  2
branch  2 taken 530
branch  3 taken 53 (fallthrough)
        -:   58:    {
     5830:   59:      for (j = 0; j < 10; j++)
      530:   59-block  0
unconditional  0 taken 530
     5300:   59-block  1
unconditional  1 taken 5300
     5830:   59-block  2
branch  2 taken 5300
branch  3 taken 530 (fallthrough)
        -:   60:        {
     5300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
     5300:   61-block  0
branch  0 taken 4770 (fallthrough)
branch  1 taken 530
     4770:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4770
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       53:   73:  if (numPlayers == 2)
       53:   73-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 10
        -:   74:    {
       43:   75:      state->supplyCount[curse] = 10;
       43:   75-block  0
unconditional  0 taken 43
        -:   76:    }
       10:   77:  else if (numPlayers == 3)
       10:   77-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 7
        -:   78:    {
        3:   79:      state->supplyCount[curse] = 20;
        3:   79-block  0
unconditional  0 taken 3
        -:   80:    }
        -:   81:  else
        -:   82:    {
        7:   83:      state->supplyCount[curse] = 30;
        7:   83-block  0
unconditional  0 taken 7
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       53:   87:  if (numPlayers == 2)
       53:   87-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 10
        -:   88:    {
       43:   89:      state->supplyCount[estate] = 8;
       43:   90:      state->supplyCount[duchy] = 8;
       43:   91:      state->supplyCount[province] = 8;
       43:   91-block  0
unconditional  0 taken 43
        -:   92:    }
        -:   93:  else
        -:   94:    {
       10:   95:      state->supplyCount[estate] = 12;
       10:   96:      state->supplyCount[duchy] = 12;
       10:   97:      state->supplyCount[province] = 12;
       10:   97-block  0
unconditional  0 taken 10
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       53:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       53:  102:  state->supplyCount[silver] = 40;
       53:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1113:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       53:  106-block  0
unconditional  0 taken 53
     1060:  106-block  1
unconditional  1 taken 1060
     1113:  106-block  2
branch  2 taken 1060
branch  3 taken 53 (fallthrough)
        -:  107:    {
     8745:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
     1060:  108-block  0
unconditional  0 taken 1060
     7685:  108-block  1
unconditional  1 taken 7685
     8745:  108-block  2
branch  2 taken 8215
branch  3 taken 530 (fallthrough)
        -:  109:	{
     8215:  110:	  if (kingdomCards[j] == i)
     8215:  110-block  0
branch  0 taken 530 (fallthrough)
branch  1 taken 7685
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      530:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      530:  113-block  0
branch  0 taken 530 (fallthrough)
branch  1 taken 0
      530:  113-block  1
branch  2 taken 53 (fallthrough)
branch  3 taken 477
        -:  114:		{
      106:  115:		  if (numPlayers == 2){ 
       53:  115-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 10
       53:  115-block  1
unconditional  2 taken 53
       43:  116:		    state->supplyCount[i] = 8; 
       43:  116-block  0
unconditional  0 taken 43
        -:  117:		  }
       10:  118:		  else{ state->supplyCount[i] = 12; }
       10:  118-block  0
unconditional  0 taken 10
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      477:  122:		  state->supplyCount[i] = 10;
      477:  122-block  0
unconditional  0 taken 477
        -:  123:		}
      530:  124:	      break;
      530:  124-block  0
unconditional  0 taken 530
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7685:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      176:  138:  for (i = 0; i < numPlayers; i++)
       53:  138-block  0
unconditional  0 taken 53
      123:  138-block  1
unconditional  1 taken 123
      176:  138-block  2
branch  2 taken 123
branch  3 taken 53 (fallthrough)
        -:  139:    {
      123:  140:      state->deckCount[i] = 0;
      492:  141:      for (j = 0; j < 3; j++)
      123:  141-block  0
unconditional  0 taken 123
      369:  141-block  1
unconditional  1 taken 369
      492:  141-block  2
branch  2 taken 369
branch  3 taken 123 (fallthrough)
        -:  142:	{
      369:  143:	  state->deck[i][j] = estate;
      369:  144:	  state->deckCount[i]++;
        -:  145:	}
      984:  146:      for (j = 3; j < 10; j++)
      123:  146-block  0
unconditional  0 taken 123
      861:  146-block  1
unconditional  1 taken 861
      984:  146-block  2
branch  2 taken 861
branch  3 taken 123 (fallthrough)
        -:  147:	{
      861:  148:	  state->deck[i][j] = copper;
      861:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      176:  154:  for (i = 0; i < numPlayers; i++)
       53:  154-block  0
unconditional  0 taken 53
      123:  154-block  1
unconditional  1 taken 123
      176:  154-block  2
branch  2 taken 123
branch  3 taken 53 (fallthrough)
        -:  155:    {
      123:  156:      if ( shuffle(i, state) < 0 )
      123:  156-block  0
call    0 returned 123
branch  1 taken 0 (fallthrough)
branch  2 taken 123
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      176:  163:  for (i = 0; i < numPlayers; i++)
       53:  163-block  0
unconditional  0 taken 53
      123:  163-block  1
unconditional  1 taken 123
      176:  163-block  2
branch  2 taken 123
branch  3 taken 53 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      123:  166:      state->handCount[i] = 0;
      123:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1484:  176:  for (i = 0; i <= treasure_map; i++)
       53:  176-block  0
unconditional  0 taken 53
     1431:  176-block  1
unconditional  1 taken 1431
     1484:  176-block  2
branch  2 taken 1431
branch  3 taken 53 (fallthrough)
        -:  177:    {
     1431:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       53:  182:  state->outpostPlayed = 0;
       53:  183:  state->phase = 0;
       53:  184:  state->numActions = 1;
       53:  185:  state->numBuys = 1;
       53:  186:  state->playedCardCount = 0;
       53:  187:  state->whoseTurn = 0;
       53:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      318:  192:  for (it = 0; it < 5; it++){
       53:  192-block  0
unconditional  0 taken 53
unconditional  1 taken 265
      318:  192-block  1
branch  2 taken 265
branch  3 taken 53 (fallthrough)
      265:  193:    drawCard(state->whoseTurn, state);
      265:  193-block  0
call    0 returned 265
        -:  194:  }
        -:  195:
       53:  196:  updateCoins(state->whoseTurn, state, 0);
       53:  196-block  0
call    0 returned 53
        -:  197:
       53:  198:  return 0;
unconditional  0 taken 53
        -:  199:}
        -:  200:
function shuffle called 151 returned 100% blocks executed 100%
      151:  201:int shuffle(int player, struct gameState *state) {
      151:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      151:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      151:  209:  if (state->deckCount[player] < 1)
      151:  209-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 124
       27:  210:    return -1;
       27:  210-block  0
unconditional  0 taken 27
      124:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
      124:  211-block  0
call    0 returned 124
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1356:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 124
     1356:  214-block  0
branch  1 taken 1232
branch  2 taken 124 (fallthrough)
     1232:  215:    card = floor(Random() * state->deckCount[player]);
     1232:  215-block  0
call    0 returned 1232
     1232:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1232:  217:    newDeckPos++;
     4301:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 1232
     3069:  218-block  0
unconditional  1 taken 3069
     4301:  218-block  1
branch  2 taken 3069
branch  3 taken 1232 (fallthrough)
     3069:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1232:  221:    state->deckCount[player]--;
     1232:  221-block  0
unconditional  0 taken 1232
        -:  222:  }
     1356:  223:  for (i = 0; i < newDeckPos; i++) {
      124:  223-block  0
unconditional  0 taken 124
     1232:  223-block  1
unconditional  1 taken 1232
     1356:  223-block  2
branch  2 taken 1232
branch  3 taken 124 (fallthrough)
     1232:  224:    state->deck[player][i] = newDeck[i];
     1232:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      151:  228:  return 0;
      124:  228-block  0
unconditional  0 taken 124
      151:  228-block  1
unconditional  1 taken 151
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 40 returned 100% blocks executed 100%
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  320-block  0
       40:  321:  return state->supplyCount[card];
       40:  321-block  0
unconditional  0 taken 40
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 60 returned 100% blocks executed 100%
       60:  346:int whoseTurn(struct gameState *state) {
       60:  346-block  0
       60:  347:  return state->whoseTurn;
       60:  347-block  0
unconditional  0 taken 60
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 451 returned 100% blocks executed 100%
      451:  525:int drawCard(int player, struct gameState *state)
      451:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
      451:  528:  if (state->deckCount[player] <= 0){//Deck is empty
      451:  528-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 437
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       16:  533:    for (i = 0; i < state->discardCount[player];i++){
       14:  533-block  0
unconditional  0 taken 14
        2:  533-block  1
unconditional  1 taken 2
       16:  533-block  2
branch  2 taken 2
branch  3 taken 14 (fallthrough)
        2:  534:      state->deck[player][i] = state->discard[player][i];
        2:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       14:  538:    state->deckCount[player] = state->discardCount[player];
       14:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       14:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       14:  542-block  0
call    0 returned 14
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       14:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       14:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 14
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       14:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       14:  559:    if (deckCounter == 0)
       14:  559-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 1
       13:  560:      return -1;
       13:  560-block  0
unconditional  0 taken 13
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        1:  564-block  0
unconditional  0 taken 1
        -:  565:  }
        -:  566:
        -:  567:  else{
      437:  568:    int count = state->handCount[player];//Get current hand count for player
      437:  568-block  0
unconditional  0 taken 437
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      437:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      437:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      437:  576:    state->deckCount[player]--;
      437:  577:    state->handCount[player]++;//Increment hand count
      437:  577-block  0
unconditional  0 taken 437
        -:  578:  }
        -:  579:
      438:  580:  return 0;
      438:  580-block  0
unconditional  0 taken 438
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function cardEffect called 60 returned 100% blocks executed 6%
       60:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       60:  646-block  0
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
       60:  652:  int currentPlayer = whoseTurn(state);
       60:  652-block  0
call    0 returned 60
       60:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
       60:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
       60:  657:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 60
    #####:  658:    nextPlayer = 0;
    $$$$$:  658-block  0
unconditional  0 never executed
        -:  659:  }
        -:  660:  
        -:  661:	
        -:  662:  //uses switch to select card and perform actions
       60:  663:  switch( card ) 
       60:  663-block  0
branch  0 taken 20
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 20
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 20
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  664:    {
        -:  665:    case adventurer:
        -:  666:      // play adventurer card
       20:  667:      playAdventurer(currentPlayer, temphand, state);
       20:  667-block  0
call    0 returned 20
       20:  668:      return 0;
unconditional  0 taken 20
        -:  669:			
        -:  670:    case council_room:   
        -:  671:      // play council room card
    #####:  672:      playCouncilRoom(currentPlayer, handPos, state);
    $$$$$:  672-block  0
call    0 never executed
    #####:  673:      return 0;
unconditional  0 never executed
        -:  674:			
        -:  675:    case feast:
        -:  676:      // play the feast card
    #####:  677:      playFeast(currentPlayer, choice1, temphand, state);
    $$$$$:  677-block  0
call    0 never executed
    #####:  678:      return 0;
unconditional  0 never executed
        -:  679:			
        -:  680:    case gardens:
    #####:  681:      return -1;
    $$$$$:  681-block  0
unconditional  0 never executed
        -:  682:			
        -:  683:    case mine:
    #####:  684:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  685:
    #####:  686:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  686-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  686-block  1
branch  2 never executed
branch  3 never executed
        -:  687:	{
    #####:  688:	  return -1;
    $$$$$:  688-block  0
unconditional  0 never executed
        -:  689:	}
        -:  690:		
    #####:  691:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  691-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  691-block  1
branch  2 never executed
branch  3 never executed
        -:  692:	{
    #####:  693:	  return -1;
    $$$$$:  693-block  0
unconditional  0 never executed
        -:  694:	}
        -:  695:
    #####:  696:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  696-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  697:	{
    #####:  698:	  return -1;
    $$$$$:  698-block  0
unconditional  0 never executed
        -:  699:	}
        -:  700:
    #####:  701:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  701-block  0
call    0 never executed
        -:  702:
        -:  703:      //discard card from hand
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  705:
        -:  706:      //discard trashed card
    #####:  707:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  707-block  0
unconditional  1 never executed
    $$$$$:  707-block  1
branch  2 never executed
branch  3 never executed
        -:  708:	{
    #####:  709:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  709-block  0
branch  0 never executed
branch  1 never executed
        -:  710:	    {
    #####:  711:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  711-block  0
call    0 never executed
    #####:  712:	      break;
unconditional  0 never executed
        -:  713:	    }
        -:  714:	}
        -:  715:			
    #####:  716:      return 0;
    $$$$$:  716-block  0
unconditional  0 never executed
        -:  717:			
        -:  718:    case remodel:
    #####:  719:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  720:
    #####:  721:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  721-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  722:	{
    #####:  723:	  return -1;
    $$$$$:  723-block  0
unconditional  0 never executed
        -:  724:	}
        -:  725:
    #####:  726:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  726-block  0
call    0 never executed
        -:  727:
        -:  728:      //discard card from hand
    #####:  729:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  730:
        -:  731:      //discard trashed card
    #####:  732:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  732-block  0
unconditional  1 never executed
    $$$$$:  732-block  1
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  734-block  0
branch  0 never executed
branch  1 never executed
        -:  735:	    {
    #####:  736:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  736-block  0
call    0 never executed
    #####:  737:	      break;
unconditional  0 never executed
        -:  738:	    }
        -:  739:	}
        -:  740:
        -:  741:
    #####:  742:      return 0;
    $$$$$:  742-block  0
unconditional  0 never executed
        -:  743:		
        -:  744:    case smithy:
        -:  745:      // play the Smithy card
       20:  746:      playSmithy(currentPlayer, handPos, state);
       20:  746-block  0
call    0 returned 20
       20:  747:      return 0;
unconditional  0 taken 20
        -:  748:		
        -:  749:    case village:
        -:  750:      // play the village card
    #####:  751:      playVillage(currentPlayer, handPos, state);
    $$$$$:  751-block  0
call    0 never executed
    #####:  752:      return 0;
unconditional  0 never executed
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  756-block  0
branch  0 never executed
branch  1 never executed
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
    $$$$$:  759-block  0
unconditional  0 never executed
    $$$$$:  759-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  759-block  2
unconditional  3 never executed
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  760-block  0
branch  0 never executed
branch  1 never executed
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  764-block  0
unconditional  0 never executed
    $$$$$:  764-block  1
unconditional  1 never executed
    $$$$$:  764-block  2
branch  2 never executed
branch  3 never executed
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  769-block  0
unconditional  0 never executed
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  771-block  0
branch  0 never executed
branch  1 never executed
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
    $$$$$:  776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  777-block  0
call    0 never executed
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  780:		isGameOver(state);
    $$$$$:  780-block  0
call    0 never executed
unconditional  1 never executed
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  783-block  0
unconditional  0 never executed
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
    $$$$$:  787-block  0
unconditional  0 never executed
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
    $$$$$:  793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  794-block  0
call    0 never executed
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	    isGameOver(state);
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
    $$$$$:  803-block  0
unconditional  0 never executed
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
    $$$$$:  807-block  0
call    0 never executed
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
unconditional  0 never executed
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  821-block  0
call    0 never executed
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
    $$$$$:  825-block  0
unconditional  0 never executed
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  828-block  0
branch  0 never executed
branch  1 never executed
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
    $$$$$:  831-block  0
unconditional  0 never executed
    $$$$$:  831-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  833-block  0
call    0 never executed
unconditional  1 never executed
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
    $$$$$:  837-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  837-block  1
branch  2 never executed
branch  3 never executed
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
    $$$$$:  839-block  0
call    0 never executed
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  843-block  0
unconditional  0 never executed
    $$$$$:  843-block  1
unconditional  1 never executed
    $$$$$:  843-block  2
branch  2 never executed
branch  3 never executed
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
    $$$$$:  845-block  0
branch  0 never executed
branch  1 never executed
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
    $$$$$:  847-block  0
branch  0 never executed
branch  1 never executed
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
    $$$$$:  850-block  0
unconditional  0 never executed
    $$$$$:  850-block  1
branch  1 never executed
branch  2 never executed
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
    $$$$$:  852-block  0
call    0 never executed
unconditional  1 never executed
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
    $$$$$:  856-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  856-block  1
branch  2 never executed
branch  3 never executed
        -:  857:			{
    #####:  858:			  drawCard(i, state);
    $$$$$:  858-block  0
call    0 never executed
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
    $$$$$:  865-block  0
unconditional  0 never executed
        -:  866:		
        -:  867:    case steward:
       20:  868:      if (choice1 == 1)
       20:  868-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 0
        -:  869:	{
        -:  870:	  //+2 cards
       20:  871:	  drawCard(currentPlayer, state);
       20:  871-block  0
call    0 returned 20
       20:  872:	  drawCard(currentPlayer, state);
call    0 returned 20
unconditional  1 taken 20
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
    $$$$$:  874-block  0
branch  0 never executed
branch  1 never executed
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
    $$$$$:  877-block  0
unconditional  0 never executed
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  882-block  0
call    0 never executed
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
       20:  887:      discardCard(handPos, currentPlayer, state, 0);
       20:  887-block  0
call    0 returned 20
       20:  888:      return 0;
unconditional  0 taken 20
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  891-block  0
branch  0 never executed
branch  1 never executed
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
    $$$$$:  892-block  0
branch  0 never executed
branch  1 never executed
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
    $$$$$:  894-block  0
unconditional  0 never executed
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  896-block  0
branch  0 never executed
branch  1 never executed
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
    $$$$$:  898-block  0
unconditional  0 never executed
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
    $$$$$:  909-block  0
branch  0 never executed
branch  1 never executed
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  910-block  0
unconditional  0 never executed
    $$$$$:  910-block  1
unconditional  1 never executed
    $$$$$:  910-block  2
branch  2 never executed
branch  3 never executed
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  917-block  0
call    0 never executed
unconditional  1 never executed
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
    $$$$$:  924-block  0
unconditional  0 never executed
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$:  927-block  0
branch  0 never executed
branch  1 never executed
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
    $$$$$:  930-block  0
unconditional  0 never executed
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
    $$$$$:  933-block  0
unconditional  0 never executed
    $$$$$:  933-block  1
unconditional  1 never executed
    $$$$$:  933-block  2
branch  2 never executed
branch  3 never executed
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  934-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  934-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  934-block  2
branch  4 never executed
branch  5 never executed
    #####:  935:	  state->coins += 2;
    $$$$$:  935-block  0
unconditional  0 never executed
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$:  938-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  938-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  938-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  938-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  938-block  4
branch  8 never executed
branch  9 never executed
    #####:  939:	  drawCard(currentPlayer, state);
    $$$$$:  939-block  0
call    0 never executed
    #####:  940:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
    $$$$$:  943-block  0
unconditional  0 never executed
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
    $$$$$:  947-block  0
unconditional  0 never executed
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
    $$$$$:  952-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  952-block  1
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;				
    $$$$$:  954-block  0
unconditional  0 never executed
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  return -1;
    $$$$$:  959-block  0
unconditional  0 never executed
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  962-block  0
unconditional  0 never executed
    $$$$$:  962-block  1
unconditional  1 never executed
    $$$$$:  962-block  2
branch  2 never executed
branch  3 never executed
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$:  964-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  964-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  964-block  2
branch  4 never executed
branch  5 never executed
        -:  965:	    {
    #####:  966:	      j++;
    $$$$$:  966-block  0
unconditional  0 never executed
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
    $$$$$:  969-block  0
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;				
    $$$$$:  971-block  0
unconditional  0 never executed
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  981-block  0
unconditional  0 never executed
    $$$$$:  981-block  1
unconditional  1 never executed
    $$$$$:  981-block  2
branch  2 never executed
branch  3 never executed
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
    $$$$$:  983-block  0
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$:  985-block  0
call    0 never executed
unconditional  1 never executed
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$:  990-block  0
call    0 never executed
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$:  993-block  0
unconditional  1 never executed
    $$$$$:  993-block  1
branch  2 never executed
branch  3 never executed
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  995-block  0
unconditional  0 never executed
    $$$$$:  995-block  1
unconditional  1 never executed
    $$$$$:  995-block  2
branch  2 never executed
branch  3 never executed
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$:  997-block  0
branch  0 never executed
branch  1 never executed
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
    $$$$$:  999-block  0
call    0 never executed
    #####: 1000:		  break;
unconditional  0 never executed
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
    $$$$$: 1005-block  0
unconditional  0 never executed
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1009-block  0
call    0 never executed
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1010-block  0
unconditional  1 never executed
    $$$$$: 1010-block  1
branch  2 never executed
branch  3 never executed
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
    $$$$$: 1012-block  0
branch  0 never executed
branch  1 never executed
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1014-block  0
unconditional  0 never executed
    $$$$$: 1014-block  1
unconditional  1 never executed
    $$$$$: 1014-block  2
branch  2 never executed
branch  3 never executed
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
    $$$$$: 1016-block  0
branch  0 never executed
branch  1 never executed
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
    $$$$$: 1018-block  0
call    0 never executed
    #####: 1019:		      break;
unconditional  0 never executed
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1023-block  0
unconditional  0 never executed
    $$$$$: 1023-block  1
unconditional  1 never executed
    $$$$$: 1023-block  2
branch  2 never executed
branch  3 never executed
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
    $$$$$: 1028-block  0
unconditional  0 never executed
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1037-block  0
call    0 never executed
        -: 1038:
    #####: 1039:      return 0;
unconditional  0 never executed
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1047-block  0
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  return -1;
    $$$$$: 1049-block  0
unconditional  0 never executed
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1056-block  0
call    0 never executed
    #####: 1057:      return 0;
unconditional  0 never executed
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1064-block  0
call    0 never executed
    #####: 1065:      return 0;
unconditional  0 never executed
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
    $$$$$: 1071-block  0
branch  0 never executed
branch  1 never executed
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1074-block  0
call    0 never executed
call    1 never executed
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1080-block  0
call    0 never executed
    #####: 1081:      return 0;
unconditional  0 never executed
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1084-block  0
unconditional  0 never executed
    $$$$$: 1084-block  1
unconditional  1 never executed
    $$$$$: 1084-block  2
branch  2 never executed
branch  3 never executed
    #####: 1085:	if (i != currentPlayer){
    $$$$$: 1085-block  0
branch  0 never executed
branch  1 never executed
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1088-block  0
unconditional  0 never executed
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
    $$$$$: 1091-block  0
unconditional  0 never executed
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1096-block  0
unconditional  0 never executed
    $$$$$: 1096-block  1
unconditional  1 never executed
    $$$$$: 1096-block  2
branch  2 never executed
branch  3 never executed
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1098-block  1
branch  2 never executed
branch  3 never executed
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
    $$$$$: 1101-block  0
unconditional  0 never executed
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
    $$$$$: 1104-block  0
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1107-block  0
call    0 never executed
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1111-block  0
branch  2 never executed
branch  3 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1113-block  0
call    0 never executed
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
    $$$$$: 1117-block  0
unconditional  0 never executed
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
    $$$$$: 1121-block  0
unconditional  0 never executed
        -: 1122:    }
        -: 1123:	
       60: 1124:  return -1;
    $$$$$: 1124-block  0
unconditional  0 never executed
       60: 1124-block  1
unconditional  1 taken 60
        -: 1125:}
        -: 1126:
function discardCard called 40 returned 100% blocks executed 78%
       40: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       40: 1127-block  0
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
       40: 1131:  if (trashFlag < 1)
       40: 1131-block  0
branch  0 taken 40 (fallthrough)
branch  1 taken 0
        -: 1132:    {
        -: 1133:      //add card to played pile
       40: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1135:      state->playedCardCount++;
       40: 1135-block  0
unconditional  0 taken 40
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
       40: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
       40: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       40: 1142-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 40
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
    $$$$$: 1145-block  0
unconditional  0 never executed
        -: 1146:    }
       40: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       40: 1147-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 40
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
    $$$$$: 1150-block  0
unconditional  0 never executed
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
       40: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
       40: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
       40: 1159:      state->handCount[currentPlayer]--;
       40: 1159-block  0
unconditional  0 taken 40
        -: 1160:    }
        -: 1161:	
       40: 1162:  return 0;
       40: 1162-block  0
unconditional  0 taken 40
        -: 1163:}
        -: 1164:
function gainCard called 40 returned 100% blocks executed 70%
       40: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       40: 1165-block  0
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
       40: 1170:  if ( supplyCount(supplyPos, state) < 1 )
       40: 1170-block  0
call    0 returned 40
branch  1 taken 0 (fallthrough)
branch  2 taken 40
        -: 1171:    {
    #####: 1172:      return -1;
    $$$$$: 1172-block  0
unconditional  0 never executed
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
       40: 1180:  if (toFlag == 1)
       40: 1180-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 40
        -: 1181:    {
    #####: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:      state->deckCount[player]++;
    $$$$$: 1183-block  0
unconditional  0 never executed
        -: 1184:    }
       40: 1185:  else if (toFlag == 2)
       40: 1185-block  0
branch  0 taken 40 (fallthrough)
branch  1 taken 0
        -: 1186:    {
       40: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       40: 1188:      state->handCount[player]++;
       40: 1188-block  0
unconditional  0 taken 40
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
    $$$$$: 1193-block  0
unconditional  0 never executed
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
       40: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
       40: 1199:  return 0;
       40: 1199-block  0
unconditional  0 taken 40
        -: 1200:}
        -: 1201:
function updateCoins called 53 returned 100% blocks executed 82%
       53: 1202:int updateCoins(int player, struct gameState *state, int bonus)
       53: 1202-block  0
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
       53: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
      318: 1210:  for (i = 0; i < state->handCount[player]; i++)
       53: 1210-block  0
unconditional  0 taken 53
      265: 1210-block  1
unconditional  1 taken 265
      318: 1210-block  2
branch  2 taken 265
branch  3 taken 53 (fallthrough)
        -: 1211:    {
      265: 1212:      if (state->hand[player][i] == copper)
      265: 1212-block  0
branch  0 taken 212 (fallthrough)
branch  1 taken 53
        -: 1213:	{
      212: 1214:	  state->coins += 1;
      212: 1214-block  0
unconditional  0 taken 212
        -: 1215:	}
       53: 1216:      else if (state->hand[player][i] == silver)
       53: 1216-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 53
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
    $$$$$: 1218-block  0
unconditional  0 never executed
        -: 1219:	}
       53: 1220:      else if (state->hand[player][i] == gold)
       53: 1220-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 53
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
    $$$$$: 1222-block  0
unconditional  0 never executed
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
       53: 1227:  state->coins += bonus;
        -: 1228:
       53: 1229:  return 0;
       53: 1229-block  0
unconditional  0 taken 53
        -: 1230:}
        -: 1231:
        -: 1232:// ******************************************** ADD FUNCTIONS HERE ************************************************
        -: 1233:
        -: 1234:/*********************************************************
        -: 1235: * Name: playSmithy
        -: 1236: * Description: plays the smithy card
        -: 1237: * Operations: draws 3 cards, discard smithy from hand
        -: 1238: * Input parameters: current player (int), hand position of smith (int),
        -: 1239: *                   game state struct pointer
        -: 1240: * Output: returns 0
        -: 1241:*********************************************************/
function playSmithy called 20 returned 100% blocks executed 100%
       20: 1242:int playSmithy(int currentPlayer, int handPos, struct gameState *state)
       20: 1242-block  0
        -: 1243:{
        -: 1244:  //draw 3 cards
       20: 1245:  int i = 0;
      100: 1246:  for (i = 0; i <= 3; i++)    // changed this to i <= 3 from i < 3.  This will cause smithy to draw 4 cards instead of 3.  BUG 1
       20: 1246-block  0
unconditional  0 taken 20
unconditional  1 taken 80
      100: 1246-block  1
branch  2 taken 80
branch  3 taken 20 (fallthrough)
        -: 1247:	{
       80: 1248:	  drawCard(currentPlayer, state);
       80: 1248-block  0
call    0 returned 80
        -: 1249:	}
        -: 1250:			
        -: 1251:  //discard card from hand
       20: 1252:  discardCard(handPos, currentPlayer, state, 0);
       20: 1252-block  0
call    0 returned 20
        -: 1253:  
       20: 1254:  return 0;
unconditional  0 taken 20
        -: 1255:}
        -: 1256:
        -: 1257:
        -: 1258:/*********************************************************
        -: 1259: * Name: playAdventurer
        -: 1260: * Description: plays the adventurer card
        -: 1261: * Operations: draw cards until revealing 2 treasure cards and adding them to the players hand,
        -: 1262: *             then discard the non-treasure cards the player drew
        -: 1263: * Input parameters: current player (int), temphand (int array),
        -: 1264: *                   game state struct pointer
        -: 1265: * Output: returns 0
        -: 1266:*********************************************************/
function playAdventurer called 20 returned 100% blocks executed 100%
       20: 1267:int playAdventurer(int currentPlayer,  int temphand[], struct gameState *state)
       20: 1267-block  0
        -: 1268:{
        -: 1269:  // initialize our drawn treasure and card drawn vars
       20: 1270:  int drawntreasure = 0;
       20: 1271:  int cardDrawn = 0;
        -: 1272:  
        -: 1273:  // temp hand counter
       20: 1274:  int z = 0;
        -: 1275:  
        -: 1276:  // continue to draw new cards until 2 treasure cards have been drawn
       86: 1277:  while(drawntreasure<2)
       20: 1277-block  0
unconditional  0 taken 20
       86: 1277-block  1
branch  1 taken 66
branch  2 taken 20 (fallthrough)
        -: 1278:  {
        -: 1279:    //if the deck is empty we need to shuffle discard and add to deck
       66: 1280:	  if (state->deckCount[currentPlayer] <1)
       66: 1280-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 52
        -: 1281:	  {
       14: 1282:	    shuffle(currentPlayer, state);
       14: 1282-block  0
call    0 returned 14
unconditional  1 taken 14
        -: 1283:	  }
        -: 1284:	  
        -: 1285:	  // draw a card
       66: 1286:	  drawCard(currentPlayer, state);
       66: 1286-block  0
call    0 returned 66
        -: 1287:	  
        -: 1288:	  // read the card drawn
       66: 1289:	  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1290:	  
        -: 1291:	  
       66: 1292:	  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 26 (fallthrough)
branch  1 taken 40
       26: 1292-block  0
branch  2 taken 26 (fallthrough)
branch  3 taken 0
       26: 1292-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 26
       40: 1293:	    drawntreasure++;
       40: 1293-block  0
unconditional  0 taken 40
        -: 1294:	  else
        -: 1295:	  {
       26: 1296:	    temphand[z]=cardDrawn;
       26: 1297:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       26: 1298:	    z++;
       26: 1298-block  0
unconditional  0 taken 26
        -: 1299:	  }
        -: 1300:  }
        -: 1301:      
       27: 1302:  while(z-1 > 1)    // introduced bug here with discarding cards  Original: z-1 >= 0, so with z-1 > 1, this never drops to 0 to discard all the cards  BUG 2
       20: 1302-block  0
unconditional  0 taken 20
       27: 1302-block  1
branch  1 taken 7
branch  2 taken 20 (fallthrough)
        -: 1303:  {
        7: 1304:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        7: 1305:	  z = z - 1;
        7: 1305-block  0
unconditional  0 taken 7
        -: 1306:  }
        -: 1307:  
       20: 1308:  return 0;
       20: 1308-block  0
unconditional  0 taken 20
        -: 1309:}
        -: 1310:
        -: 1311:
        -: 1312:/*********************************************************
        -: 1313: * Name: playCouncilRoom
        -: 1314: * Description: plays the council room card
        -: 1315: * Operations: player draws 4 cards, increases their buy ability by 1, and every OTHER player draws 1 card
        -: 1316: * Input parameters: current player (int), hand position (int),
        -: 1317: *                   game state struct pointer
        -: 1318: * Output: returns 0
        -: 1319:*********************************************************/
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1320:int playCouncilRoom(int currentPlayer, int handPos, struct gameState *state)
    $$$$$: 1320-block  0
        -: 1321:{
    #####: 1322:  int i = 0;
        -: 1323:    
        -: 1324:  // draw 4 cards
    #####: 1325:  for (i = 0; i < 4; i++)
    $$$$$: 1325-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1325-block  1
branch  2 never executed
branch  3 never executed
        -: 1326:	{
    #####: 1327:	  drawCard(currentPlayer, state);
    $$$$$: 1327-block  0
call    0 never executed
        -: 1328:	}
        -: 1329:			
        -: 1330:  //+1 Buy
    #####: 1331:  state->numBuys++;
        -: 1332:	
        -: 1333:  //Each other player draws a card
    #####: 1334:  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1334-block  0
unconditional  0 never executed
    $$$$$: 1334-block  1
unconditional  1 never executed
    $$$$$: 1334-block  2
branch  2 never executed
branch  3 never executed
        -: 1335:	{
    #####: 1336:	  if ( i != currentPlayer )
    $$$$$: 1336-block  0
branch  0 never executed
branch  1 never executed
        -: 1337:    {
    #####: 1338:	    drawCard(i, state);
    $$$$$: 1338-block  0
call    0 never executed
unconditional  1 never executed
        -: 1339:	  }
        -: 1340:	}
        -: 1341:			
        -: 1342:  //put played card in played card pile
    #####: 1343:  discardCard(handPos, currentPlayer, state, 1); // changed the trashed flag to 1. since card is "trashed" it doesn't get added to the played pile in the discardCard function BUG 3
    $$$$$: 1343-block  0
call    0 never executed
        -: 1344:                                                 // one interesting note I want to mention here: there doesn't seem to be a remove card from play function. this trash flag doesn't seem to do a whole lot
    #####: 1345:  return 0;
unconditional  0 never executed
        -: 1346:}
        -: 1347:
        -: 1348:/*********************************************************
        -: 1349: * Name: playVillage
        -: 1350: * Description: plays the Village card
        -: 1351: * Operations: player draws 1 card and adds 2 actions to their number of actions allowed to be performed
        -: 1352: * Input parameters: current player (int), hand position (int),
        -: 1353: *                   game state struct pointer
        -: 1354: * Output: returns 0
        -: 1355:*********************************************************/
function playVillage called 0 returned 0% blocks executed 0%
    #####: 1356:int playVillage(int currentPlayer, int handPos, struct gameState *state)
    $$$$$: 1356-block  0
        -: 1357:{
        -: 1358:  //+1 Card
    #####: 1359:  drawCard(currentPlayer, state);
    $$$$$: 1359-block  0
call    0 never executed
        -: 1360:  
        -: 1361:  //+2 Actions
    #####: 1362:  state->numActions = state->numActions + 2;
        -: 1363:  
        -: 1364:  //discard played card from hand
    #####: 1365:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1366:  
    #####: 1367:  return 0;
unconditional  0 never executed
        -: 1368:}
        -: 1369:
        -: 1370:/*********************************************************
        -: 1371: * Name: playFeast
        -: 1372: * Description: plays the Feast card
        -: 1373: * Operations: Feast card goes to trash, player gains one card costing up to 5 treasure and it is added to the discard pile
        -: 1374: * Input parameters: current player (int), choice1 (int), temphand (int array)
        -: 1375: *                   game state struct pointer
        -: 1376: * Output: returns 0
        -: 1377:*********************************************************/
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1378:int playFeast(int currentPlayer, int choice1, int temphand[], struct gameState *state)
    $$$$$: 1378-block  0
        -: 1379:{
        -: 1380:  //gain card with cost up to 5 and back up the player's hand
    #####: 1381:  int i = 0;
    #####: 1382:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
    $$$$$: 1382-block  0
unconditional  0 never executed
    $$$$$: 1382-block  1
unconditional  1 never executed
    $$$$$: 1382-block  2
branch  2 never executed
branch  3 never executed
        -: 1383:  {
    #####: 1384:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1385:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1386:  }
        -: 1387:  
        -: 1388:  // update player's buy coins to 5
    #####: 1389:  updateCoins(currentPlayer, state, 5);
    $$$$$: 1389-block  0
call    0 never executed
        -: 1390:  
    #####: 1391:  int x = 1;
    #####: 1392:  while( x < 1)     // changed from == to <.  Now, you can play feast and will never gain a card.  BUG 4
unconditional  0 never executed
    $$$$$: 1392-block  0
branch  1 never executed
branch  2 never executed
        -: 1393:  {//Buy one card
    #####: 1394:    if (supplyCount(choice1, state) <= 0)
    $$$$$: 1394-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1395:    {
        -: 1396:      if (DEBUG)
        -: 1397:        printf("None of that card left, sorry!\n");
        -: 1398:      
        -: 1399:      if (DEBUG)
        -: 1400:      {
        -: 1401:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1402:      }
        -: 1403:    }
    #####: 1404:    else if (state->coins < getCost(choice1))
    $$$$$: 1404-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1405:    {
    #####: 1406:      printf("That card is too expensive!\n");
    $$$$$: 1406-block  0
call    0 never executed
unconditional  1 never executed
        -: 1407:
        -: 1408:      if (DEBUG)
        -: 1409:      {
        -: 1410:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1411:      }
        -: 1412:    }
        -: 1413:    else
        -: 1414:    {
        -: 1415:      if (DEBUG)
        -: 1416:      {
        -: 1417:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1418:      }
        -: 1419:
    #####: 1420:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$: 1420-block  0
call    0 never executed
    #####: 1421:      x = 0;//No more buying cards
unconditional  0 never executed
        -: 1422:
        -: 1423:      if (DEBUG)
        -: 1424:      {
        -: 1425:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1426:      }
        -: 1427:    }
        -: 1428:  }     
        -: 1429:
        -: 1430:  //Reset Hand
    #####: 1431:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
    $$$$$: 1431-block  0
unconditional  0 never executed
    $$$$$: 1431-block  1
unconditional  1 never executed
    $$$$$: 1431-block  2
branch  2 never executed
branch  3 never executed
        -: 1432:  {
    #####: 1433:	  state->hand[currentPlayer][i] = temphand[i];
    #####: 1434:	  temphand[i] = -1;
        -: 1435:  }
        -: 1436:  
    #####: 1437:  return 0;
    $$$$$: 1437-block  0
unconditional  0 never executed
        -: 1438:}
        -: 1439:
        -: 1440://end of dominion.c
        -: 1441:
